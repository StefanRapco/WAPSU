scalar DateTime
scalar Void
scalar JSONObject

type Query {
  identity: User
  teamOne(id: ID!): Team!
  teamMany(input: TeamManyInput): TeamManyOutput!
  userOne(id: ID!): User!
  userMany(input: UserManyInput): UserManyOutput!
}

type Mutation {
  identityUpdate(input: IdentityUpdateInput!): User!
  signInCodeComplete(input: SignInCodeCompleteInput!): Void
  signInCodeRequest(input: SignInCodeRequestInput!): Void
  signOut(input: SignOutInput!): Void
  teamCreate(input: TeamCreateInput!): Team!
  userUpdate(input: UserUpdateInput!): User!
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  fullName: String!
  email: String!
  isPasswordNull: Boolean!
  teams: [Team!]!
}

type Team {
  id: ID!
  name: String!
  avatar: String!
  createdAt: DateTime!
  users: [User!]!
}

type UserManyOutput {
  items: [User!]!
  total: Int!
  hasMore: Boolean!
}

type TeamManyOutput {
  items: [Team!]!
  total: Int!
  hasMore: Boolean!
}

input UserManyInput {
  page: PageInput
  filter: UserManyFilterInput
}

input TeamManyInput {
  page: PageInput
  filter: TeamManyFilterInput
}

input PageInput {
  page: Int!
  pageSize: Int!
}

input UserManyFilterInput {
  term: String
  teamId: [ID!]
  notTeamId: [ID!]
  filterIdentity: Boolean
}

input TeamManyFilterInput {
  term: String
}

input SignInCodeRequestInput {
  email: String!
}

input SignOutInput {
  email: String!
}

input SignInCodeCompleteInput {
  email: String!
  code: String!
}

input IdentityUpdateInput {
  firstName: String
  lastName: String
}

input UserUpdateInput {
  id: ID!
  firstName: String
  lastName: String
}

input TeamCreateInput {
  name: String!
  avatar: String!
  userIds: [ID!]
}
