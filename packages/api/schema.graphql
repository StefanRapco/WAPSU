scalar DateTime
scalar Void
scalar JSONObject

type Query {
  identity: User
  teamOne(id: ID!): Team!
  teamMany(input: TeamManyInput): TeamManyOutput!
  userOne(id: ID!): User!
  userMany(input: UserManyInput): UserManyOutput!
}

type Mutation {
  identityUpdate(input: IdentityUpdateInput!): User!
  signInCodeComplete(input: SignInCodeCompleteInput!): Void
  signInCodeRequest(input: SignInCodeRequestInput!): Void
  signOut(input: SignOutInput!): Void
  teamCreate(input: TeamCreateInput!): Team!
  teamEdit(input: TeamEditInput!): Team!
  teamUserAdd(input: TeamUserAddInput!): Team!
  teamUserEdit(input: TeamUserEditInput!): Team!
  userUpdate(input: UserUpdateInput!): User!
  userRoleUpdate(input: UserRoleUpdateInput!): User!
  userArchive(input: UserArchiveInput!): User!
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  fullName: String!
  email: String!
  isPasswordNull: Boolean!
  teams: [Team!]!
  systemRole: Option!
  status: Option!
}

type Team {
  id: ID!
  name: String!
  description: String
  avatar: String!
  createdAt: DateTime!
  users(input: UserManyInput): TeamUserOutput!
}

type TeamUserOutput {
  items: [TeamUser!]!
  total: Int!
  hasMore: Boolean!
}

type TeamUser {
  id: ID!
  firstName: String!
  lastName: String!
  fullName: String!
  email: String!
  teamRole: Option!
  systemRole: Option!
}

type UserManyOutput {
  items: [User!]!
  total: Int!
  hasMore: Boolean!
}

type TeamManyOutput {
  items: [Team!]!
  total: Int!
  hasMore: Boolean!
}

input UserManyInput {
  page: PageInput
  filter: UserManyFilterInput
}

input TeamManyInput {
  page: PageInput
  filter: TeamManyFilterInput
}

input PageInput {
  page: Int!
  pageSize: Int!
}

input UserManyFilterInput {
  term: String
  teamId: [ID!]
  notTeamId: [ID!]
  filterIdentity: Boolean
  systemRole: [String!]
  status: [String!]
}

input TeamManyFilterInput {
  term: String
  userId: [ID!]
}

input SignInCodeRequestInput {
  email: String!
}

input SignOutInput {
  email: String!
}

input SignInCodeCompleteInput {
  email: String!
  code: String!
}

input IdentityUpdateInput {
  firstName: String
  lastName: String
}

input UserUpdateInput {
  id: ID!
  firstName: String
  lastName: String
}

input TeamCreateInput {
  name: String!
  avatar: String!
  userIds: [ID!]
}

input TeamUserAddInput {
  teamId: ID!
  userIds: [ID!]!
}

input TeamUserEditInput {
  teamId: ID!
  userId: ID!
  action: TeamUserEditAction!
}

enum TeamUserEditAction {
  upgrade
  downgrade
  remove
}

input TeamEditInput {
  teamId: ID!
  name: String
  description: String
  avatar: String
}

type Option {
  label: String!
  value: String!
}

input UserRoleUpdateInput {
  userId: ID!
  systemRole: SystemRole!
}

enum SystemRole {
  admin
  user
}

input UserArchiveInput {
  userId: ID!
}
