// This is Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
  binaryTargets   = ["native", "linux-arm64-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id
  email     String   @unique @db.VarChar(255)
  firstName String   @db.TinyText
  lastName  String   @db.TinyText
  password  String?  @db.Text
  createdAt DateTime @default(now())
  mfa       String?  @db.TinyText

  status UserStatus @default(active)

  systemRole    SystemRole   @default(user)
  teams         UserOnTeam[]
  buckets       Bucket[]
  tasksAssignee Task[]
  tags          Tag[]
}

model Team {
  id          String   @id
  name        String   @db.TinyText
  description String?  @db.Text
  avatar      String   @db.TinyText
  createdAt   DateTime @default(now())

  tags Tag[]

  users   UserOnTeam[]
  buckets Bucket[]
}

model UserOnTeam {
  userId String
  teamId String

  isOwner  Boolean  @default(false)
  joinedAt DateTime @default(now())

  teamRole TeamRole @default(member)

  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])

  @@id([userId, teamId])
}

enum TeamRole {
  owner
  ambassador
  member
}

enum SystemRole {
  admin
  user
}

enum UserStatus {
  active
  archived
  invited
}

model Task {
  id        String   @id
  name      String   @db.TinyText
  notes     String?  @db.Text
  createdAt DateTime @default(now())

  startDate DateTime?
  dueDate   DateTime?

  sortOrder Int

  assignees User[]

  progress TaskProgress @default(notStarted)
  priority TaskPriority @default(low)

  comments  TaskComment[]
  checklist TaskChecklist[]

  tags TaskTagOnTask[]

  bucketId String @db.VarChar(48)
  bucket   Bucket @relation(fields: [bucketId], references: [id])
}

model Bucket {
  id   String @id
  name String @db.TinyText

  sortOrder Int

  teamId String? @db.VarChar(48)
  team   Team?   @relation(fields: [teamId], references: [id])

  userId String? @db.VarChar(48)
  user   User?   @relation(fields: [userId], references: [id])

  tasks Task[]
}

enum TaskProgress {
  notStarted
  inProgress
  completed
}

enum TaskPriority {
  low
  medium
  high
  urgent
}

model TaskComment {
  id        String   @id
  content   String   @db.Text
  createdAt DateTime @default(now())

  isEdited Boolean @default(false)

  taskId String @db.VarChar(48)
  task   Task   @relation(fields: [taskId], references: [id])
}

model TaskChecklist {
  id        String   @id
  name      String   @db.TinyText
  createdAt DateTime @default(now())
  completed Boolean  @default(false)

  sortOrder Int

  taskId String @db.VarChar(48)
  task   Task   @relation(fields: [taskId], references: [id])
}

model Tag {
  id   String @id
  name String @db.TinyText

  tasks TaskTagOnTask[]

  teamId String? @db.VarChar(48)
  team   Team?   @relation(fields: [teamId], references: [id])

  userId String? @db.VarChar(48)
  user   User?   @relation(fields: [userId], references: [id])
}

model TaskTagOnTask {
  taskId String
  tagId  String

  task Task @relation(fields: [taskId], references: [id])
  tag  Tag  @relation(fields: [tagId], references: [id])

  @@id([taskId, tagId])
}
